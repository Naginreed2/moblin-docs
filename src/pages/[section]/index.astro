---
import { getCollection } from 'astro:content';
import { AstroError } from 'astro/errors';

// Fetch paths for dynamic route generation
export async function getStaticPaths() {
  const allDocs = await getCollection('docs');
  const sections = new Set<string>();

  // Collect section names from folder structure
  allDocs.forEach(entry => {
    const pathParts = entry.id.split('/');
    if (pathParts.length > 1) {
      const section = pathParts[0]; // Adjusted: Extract first part (e.g., a-start)
      sections.add(section);
    }
  });

  return Array.from(sections).map((section) => ({
    params: { section },
  }));
}

const { section } = Astro.params;

// If section isn't found, throw an error to handle this case
if (!section) {
  throw new AstroError('No section parameter found.');
}

console.log('Section:', section);  // Debugging the received section

const allDocs = await getCollection('docs');

// **Log all docs to see the structure**
console.log('All docs:', allDocs);

// **Log the section being processed**
console.log('Section being processed:', section);

// Filter out files that are within the section and are not the index
const docsInSection = allDocs
  .filter(entry => {
    // Update to compare the first part of the entry ID with the section
    const isInSection = entry.id.split('/')[0] === section;  // Compare first part of the path
    console.log('Checking entry:', entry.id, 'Is in section:', isInSection); // Debugging the filtering step
    return isInSection && 
      !entry.id.includes('index') && // Don't redirect to an index file
      (entry.data.sidebar?.hidden === false || entry.data.sidebar?.hidden === undefined); // Allow undefined hidden
  });

console.log('Filtered docs in section:', docsInSection);

// Sort them by sidebar order
docsInSection.sort((a, b) => {
  const orderA = a.data.sidebar?.order ?? 999;
  const orderB = b.data.sidebar?.order ?? 999;
  return orderA - orderB;
});

// If no valid docs found in section, throw error
if (docsInSection.length === 0) {
  throw new AstroError(`No visible non-index pages found in section "${section}".`);
}

// Derive the slug from the file path (id)
const firstSlug = docsInSection[0].id.split('/').pop(); // Get the last part of the ID

if (!firstSlug) {
  throw new AstroError(`No valid slug found for first page in section "${section}".`);
}

// Construct the redirect URL, including section and slug
const redirectTo = `/${section}/${firstSlug}/`;

if (import.meta.env.SSR) {
  return new Response(null, {
    status: 302,
    headers: {
      Location: redirectTo,
    },
  });
}
---

<p>Redirecting to <a href={redirectTo}>{redirectTo}</a>...</p>
